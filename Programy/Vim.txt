Marks:
	`[ = start of pasted text, `] = end of pasted text,
	`[V`]>> indentne pasted text

set diffopt=filler,context=0

g-/g+ = prechod v case +- (jine undo)

set iskeyword-=_ zpusobi, ze _ oddeluje 'slova'

aw = "predchozi slovo"
zz = vertikalne vystred
registr "=": aritmetika
it = inside tag (textovy objekt)

INSERT MODE:
	C-w = odstran slovo
	C-u = odstran do ^
	C-o = udelej 1 norml mode command
	C-r(registr) = paste

\\(motion) = zakomentuj (pro commentary.vim - plugin)

Editing text at the speed of thought: #52 (75/329)
----------

- YouCompleteMe - podle subsekvence
- Nerd Commenter

- makeprg: muze obsahovat %, ktere se expanduje na soubor
- !!date = na tenhle radek `date`
- :R ls -la = scratchbuffer ls -la
- :goto 300 = goto offset
- :read !prikaz
- :Sex = split explore
- va( = vyber vsechno okolo ( vcetne, vi(  vyber vsechno uvnitr ( bez
- :bufdo s/co/naco/ge
- :r!ls ulozi vysledek prikazu do bufferu
- :enew
- ZZ
- Ctrl-F = obrazovka dolu, Ctrl-B = obrazovka nahoru
- 0 = na zacatek radku
- 35| = prejdi na sloupec 35
- Fx = predchozi x, Tx = za predchozi x, ; = opakuj posledni hledani na radku, , = v opacnem smeru
- 30% = prejdi na 30% souboru
- w, W = zacatek dalsiho,
- ): na zacatek nejblizsi dalsi vety (., !, ?)
- ): nejblizsi predchozi zacatek vety
- }: nejblizsi dalsi konec odstavce
- {: predchozi... (-> 3d})

- U: undo na tomhle radku
- gf: edituj soubor pod kurzorem
- :w !program = prozen to programem

- help: Ctrl-] = prejdi, Ctrl-T = zpet

- :set textwidth=80
- gq(pohyb) preformatuje
- {gq} = reformatuj odstavec
- qc ... ... ... q; -> @c
- :marks
- '' nebo ``: pred poslednim skokem
- <> = zacatek/konec vizualni oblasti
- C-N, C-P
- 35 C-W _ = nastavit vysku

Medved:
	pomlcka misto mezery pred kterou nic neni
0^$

:set cinoptions

if &term =~ "rxvt"
	set ttymouse=xterm
endif

:scriptnames		show all scripts loaded upon startup
:options
:set patchmode=.orig	save original version
:saveas xyz
:qall			quit all windows
:wall			save all windows
:s///p			print all changed lines
:/pattern/-1		one line before
:?pattern?		search backward

:...C-D			see completion list

ge			previous word end
W, B, E, gE		the same for whitespace-separated words
t, T			same as f, but stops before the character
zz			center current line on screen
C-O, C-I		older/newer position in position stack
cc, C			like dd, D
visual:o, O		edit other end (, corner) of selection
mA..Z			file marks
"A..Z			append to register (works even when recording)
K, \K			looKup man, in window
C-P, C-N		autocomplete previous, next
C-X C-F			autocomplete file name (and many other such tricks)
C-Y			insert character above cursor
(ins) C-O		execute a single normal mode command
gj, gk			move by visible lines
gv			revive last selection
/.../e			move to end of matching text (also e+1, e-1 etc.)
/...\_s.../		match space or line break
g?			rot-13
ga			show ASCII
g8			show UTF-8
s			the same as cl
S			the same as cc
U			undo all changes on the same line
50%			go to 50% of the file
10|			cursor to column 10

C-W p			goto previously active window
C-W r/R			rotate windows
C-W =			equalize windows
[<num>] C-W +/-		increase/decrease window height
[<num>] C-W >/<		increase/decrease window width
<num> C-W _/|		set window height/width
:all			open all edited files in windows
:ball			open all buffers in windows
:windo <cmd>		execute <cmd> in all windows
:bufdo <cmd>		... in all buffers
C-W P			goto preview window
C-W z			close preview window

C-], C-T, C-W ]		find tag, jump back, find tag in other window
C-W }			preview function def in other window
[#, ]#			previous, next CPP construct
[[, ]], ][		prev, next top-level block, end of current
[{, ]}			prev, next block
[(, ])			prev, next subexpression
[/, ]/			start of comment, end of comment
gD, gd			goto definition, only in current function
:cn			next error
:cc			show whole error message
:clist			list errors
:copen			... in a new window
:clist!			show whole make output

text objects:
a( = a) = ab		a parenthesized block
a< = a>			<...>
aB			{...} block
aW			white-space separated word
a[ = a]			[...]
aw, ap, as		word, paragraph, sentence
i...			inner

autowrite
display=uhex,lastline	(unprintable are shown as <XX>, partial last line shown)

:set spell => [s ]s zg(add to dict) z=(suggest correctly spelled words)

=== POUZIVAM ===
- I = ^i

b			previous word
e			next word end
H, go to home line of screen
@@			repeat last @ command
showmatch		show matching parentheses
list, listchars		highlighting of trailing spaces, tabs etc.
bg=dark
"r <Enter>" je priblizne opak J

vim-commentary
vim-fugitive: blame (Git)

Vim keys: normal -> shift -> control (descending order of frequency) (nebo taky treba &, ...)
vim reference: moving
diw: leave whitespace, daw: kill whitespace
& = repeat replace
Command-T: fuzzy search in Vim
:s, :g
vim: \| v map?
:map xx ...
:silent !echo ...
Ctrl-^ == switch between files
rails.vim: :A == switch production/test
[m ]m == move by methods in structured language
